\documentclass{article}
\usepackage{syntax}
\normalsize

\begin{document}
\section{BNF Grammatik}
\setlength{\grammarparsep}{20pt plus 1pt minus 1pt} % increase separation between rules
\setlength{\grammarindent}{12em} % increase separation between LHS/RHS 

\begin{grammar}
<source_file> ::= <dmf_declaration> <new_line> <model_declaration> <new_line> [ <import_block> ] <model_content>

<dmf_declaration> ::= 'dmf' <version_number>


<model_declaration> ::= 'model' <string_value> 'version' <version_number>

<import_block> ::= <import_statement>+

<import_statement> ::= 'import' <package_string> 'from' <string_value> [ <model_identifier> ] <new_line>

<model_identifier> ::= '(' 'model' <string_value> [ 'version' <version_number> ] ')'


<model_content> ::= <package_content>+

<package_content> ::= [ <comment_block> ] [ 'expand' ] <package_block>
\alt [ <comment_block> ] [ 'expand' ] <struct_block>
\alt [ <comment_block> ] [ 'expand' ] <enum_block>
\alt [ <comment_block> ] [ 'expand' ] <entity_block>
\alt [ <comment_block> ] [ 'expand' ] <interface_block>

% predicate.right fehlt
<comment_block> ::= <comment>+

<comment> ::= R'//.*\textbackslash n'

<package_block> ::= 'package' '\{' <package_content>+ '\}'

<struct_block> ::= 'struct' <identifier> [ <extends_block> ] [ <implements_block> ] '\{' <struct_content>+ '\}'

<extends_block> ::= 'extends' <reftype>

<implements_block> ::= 'implements' <reftype> (',' <reftype>)+

<struct_content> ::= [ <comment_block> ] <arg_block>
\alt [ <comment_block> ] <ref_block>
\alt [ <comment_block> ] <multi_block>
\alt [ <comment_block> ] <func_block>

<arg_block> ::= 'arg' <primitive_type> <identifier> ';'

<primitive_type> ::= 'byte' \alt 'int' \alt 'long' \alt 'double' \alt 'datetime' \alt 'date' \alt 'string' \alt 'boolean'

<ref_block> ::= 'ref' <reftype> <identifier> ';'

<multi_block> ::= 'ref' <multi_name> '<' <multi_type> [ ',' <multi_type> ] '>' <identifier> ';'

<multi_type> ::= <primitive_type> | <reftype>

<multi_name> ::= 'Map' | 'Set' | 'List'

<func_block> ::= 'func' <func_return_type> <identifier> '(' [ <param_list> ] ')' ';'

<param_list> ::= <param_definition> 
\alt <param_definition> ',' <param_list>

<param_definition> ::= <reftype> <identifier> | <primitive_type> <identifier>

<func_return_type> ::= <reftype> | <primitive_type> | 'void'

<enum_block> ::= 'enum' <identifier> '\{' <enum_content>+ '\}'

<enum_content> ::= <arg_block> | <enum_constant>

<enum_constant> ::= [ <comment_block> ] <identifier> '(' <enum_index> [ <enum_const_param> ] ') ';'

<enum_const_param> ::= ',' <primitive_value> [ <enum_const_param> ]

<primitive_value> ::= <byte_value> \alt <int_value> \alt <double_value> \alt <datetime_value> \alt <date_value> \alt <string_value>  \alt <boolean_value>

<enum_index> ::= '_' | <integer_value>

<entity_block> ::= 'entity' <identifier> [ <extends_block> ] [ <implements_block> ] '\{' <struct_content>+ <identifier_statement> '\}'

<identifier_statement> ::= 'identifier' '(' <identifier_list> ')' ';'

<identifier_list> ::= <identifier> [ ',' <identifier_list> ]

<interface_block> ::= 'interface' <identifier> [ <implements_block> ] '\{' <interface_content>+ '\}'

<interface_content> ::= [ <comment_block> ] <func_block>

<reftype> ::= '.' <reftype> | <package_string>

<package_string> ::= <identifier> 
\alt <identifer> <sub_identifier>
\alt <sub_identifier>
 
<sub_identifier> ::= '.' <identifier> [ <sub_identifier> ]

<identifier> ::= R'([a-zA-Z_])+'


<byte_content> ::= [0-9A-F]{4}

<number> ::= R'[0-9]+'
\end{grammar}

\section{Beispiel}
\setlength{\grammarparsep}{20pt plus 1pt minus 1pt} % increase separation between rules
\setlength{\grammarindent}{12em} % increase separation between LHS/RHS 

\begin{grammar}
<statement> ::= <ident> `=' <expr> 
\alt `for' <ident> `=' <expr> `to' <expr> `do' <statement> 
\alt `{' <stat-list> `}' 
\alt <empty> 

<stat-list> ::= <statement> `;' <stat-list> | <statement> 

\end{grammar}
\end{document}