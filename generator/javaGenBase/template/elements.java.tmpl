{{define "imports"}}{{$importSlice := getImports .}}{{if ne (len $importSlice) 0}}
{{end}}{{range $index, $import := $importSlice}}import {{$import}};
{{end}}{{end}}

{{define "extends"}}{{if or .ExtendsPath (overrideExtends .Override)}}extends {{if overrideExtends .Override}}{{overrideExtends .Override}}{{else}}{{pathType .ExtendsPath .ImportKontext .Override}}{{end}} {{end}}{{if or .ImplementsPaths (overrideImplements .Override)}}{{if .Interface}}extends{{else}}implements{{end}} {{if overrideImplements .Override}}{{overrideImplements .Override}}{{else}}{{range $index, $implPath := .ImplementsPaths}}{{pathType $implPath $.ImportKontext}}{{if ne $index (subtract (len $.ImplementsPaths) 1)}}, {{end}}{{end}} {{end}}{{end}}{{end}}

{{define "constructor"}}{{.Name}}({{template "parameter_list" .}}){
        {{range $index, $parameter := .Parameter}}
        this.{{variableName $parameter.Variable}} = {{variableName $parameter.Variable}};{{end}}
    }{{end}}
{{define "parameter_list"}}{{range $index, $element := .Parameter}}{{template "parameter" $element}}{{if ne $index (subtract (len $.Parameter) 1)}}, {{end}}{{end}}{{end}}
{{define "parameter_call_list"}}{{range $index, $element := .Parameter}}{{variableName $element.Variable}}{{if ne $index (subtract (len $.Parameter) 1)}}, {{end}}{{end}}{{end}}
{{define "field"}}{{template "comment_tab" .Kommentar}}{{template "annotations" .Override}}    protected {{.Typ}} {{.Name}}{{if ne .Value nil}} = {{.Value}}{{end}};
{{end}}

{{define "annotations"}}{{- /*gotype: github.com/Winnetoe24/DMF/semantic/semantic-parse/smodel/base.Override*/ -}}
{{if and (and . .JavaOverride) .JavaOverride.Annotations}}    {{.JavaOverride.Annotations.GetValue}}
{{end}}{{end}}

{{define "parameter"}}{{variableType .Variable .ImportKontext}} {{variableName .Variable}}{{end}}

{{define "method_header"}}{{template "comment_tab" (overrideJavaDoc .Funktion.Kommentar .Funktion.Override)}}{{template "annotations" .Funktion.Override}}    public {{overrideType (variableType .Funktion.ReturnType .ImportKontext) .Funktion.Override}} {{overrideName .Funktion.Name.Name .Funktion.Override}}({{template "parameter_list" createParameterKontext .Funktion.Parameter .ImportKontext}}){{end}}
{{define "method"}}{{template "method_header" .}}{
        {{if isNotVoid .Funktion.ReturnType}}return {{end}}{{if .UseDelegate}}delegate.{{.Funktion.Name.Name}}({{template "parameter_call_list" createParameterKontext (prependThis .Funktion.Parameter) .ImportKontext}}){{else}}{{variableDefaultValue .Funktion.ReturnType}}{{end}};
    }{{end}}

{{define "constant"}}{{template "comment_tab" .Kommentar}}    {{toUpperCase .Name.Name}}({{range $index, $value := .Values}}{{if ne $index 0}}{{valueInit $value}}{{if ne $index (subtract (len $.Values) 1)}}, {{end}}{{end}}{{end}}){{end}}

{{define "getter_und_setter"}}{{template "comment_tab" .Kommentar}}    public {{.Typ}} get{{capitalize .Name}}() {
        return this.{{.Name}};
    }

{{template "comment_tab" .Kommentar}}    public void set{{capitalize .Name}}({{.Typ}} {{.Name}}) {
        this.{{.Name}} = {{.Name}};
    }{{end}}


{{define "comment"}}{{if .}}/**
{{range $index, $element := .}} * {{removeNewLine $element}}{{end}} **/
{{end}}{{end}}
{{define "comment_tab"}}{{if .}}{{if ne (len .) 0}}    /**
{{range $index, $element := .}}     * {{removeNewLine $element}}{{end}}     **/
{{end}}{{end}}{{end}}
